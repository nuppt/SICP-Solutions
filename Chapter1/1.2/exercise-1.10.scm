(define (A x y)
  (cond ((= y 0) 0)
	((= x 0) (* 2 y))
	((= y 1) 2)
	(else (A (- x 1) (A x (- y 1))))))

(A 1 10)
(A 2 4)
(A 3 3)

(define (f n) (A 0 n))  ;; f(n) := (A 0 n)
(define (g n) (A 1 n))  ;; g(n) := (A 0 (A 1 n-1)) = 2(A 1 n-1) = 2^n
(define (h n) (A 2 n))
;; h(n) := (A 2 n)
;;       = (A (- 2 1) (A 2 (- n 1)))
;;       = (A 1 (A 2 (- n 1)))
;;       = (A 1 (h (- n 1)))
;;       = (A 0 (A 1 (- (h (- n 1)) 1)))
;;       = (* 2 (A 1 (- (h (- n 1)) 1))
;;       ... after (h (- n 1)) step
;;       = (* 2 2 ... (A 1 (- (h (- n 1) (h (- n 1))))))
;;       = (* 2 2 ... 1)  // 共(h (- n 1))个2
;;       = 2^(h (- n 1))
;;       = 2^(2^...) // n层幂运算

(define (k n) (* 5 n n))
